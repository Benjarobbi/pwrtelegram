<?php

namespace PWRTelegram\PWRTelegram;

/*
Copyright 2016 Daniil Gentili
(https://daniil.it)

This file is part of the PWRTelegram API.
the PWRTelegram API is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
The PWRTelegram API is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Affero General Public License for more details.
You should have received a copy of the GNU General Public License along with the PWRTelegram API.
If not, see <http://www.gnu.org/licenses/>.
*/

class Tools
{
    /**
     * Returns the requested url (json results are decoded if $json is set to true).
     *
     * @param $url - The location of the remote file to download. Cannot
     * be null or empty.
     * @param $json - Default is true, if set to true will json_decode the content of the url.
     *
     * @return Returns the requested url (json results are decoded if $json is set to true).
     */
    public function curl($url, $json = true)
    {
        // Get cURL resource
        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_URL            => str_replace(' ', '%20', $url),
        ]);
        $res = curl_exec($curl);
        curl_close($curl);
        if ($json == true) {
            return json_decode($res, true);
        } else {
            return $res;
        }
    }

    /**
     * Returns true if remote file exists, false if it doesn't exist.
     *
     * @param $url - The location of the remote file to download. Cannot
     * be null or empty.
     *
     * @return true if remote file exists, false if it doesn't exist.
     */
    public function checkurl($url)
    {
        $ch = curl_init(str_replace(' ', '%20', $url));
        curl_setopt($ch, CURLOPT_HEADER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_NOBODY, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 50);
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
        curl_exec($ch);
        $retcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    //	error_log($url . $retcode. curl_error($ch));
        curl_close($ch);
        if ($retcode == 200) {
            return true;
        } else {
            return false;
        }
    }

    // Die while outputting a json error
    public function jsonexit($wut)
    {
        die(json_encode($wut));
    }

    // Escape weirdly formatted json generated by webhook clients.
    public function escapeJsonString($value)
    {
        $escapers = ['\\', '/', "\n", "\r", "\t", "\x08", "\x0c"];
        $replacements = ['\\\\', '\\/', '\\n', '\\r', '\\t', '\\f', '\\b'];

        return str_replace($escapers, $replacements, $value);
    }

    /**
     * Returns the size of a file without downloading it, or -1 if the file
     * size could not be determined.
     *
     * @param $url - The location of the remote file to download. Cannot
     * be null or empty.
     *
     * @return The size of the file referenced by $url, or -1 if the size
     *             could not be determined.
     */
    public function curl_get_file_size($url)
    {
        // Assume failure.
        $result = -1;

        $curl = curl_init(str_replace(' ', '%20', $url));

        // Issue a HEAD request and follow any redirects.
        curl_setopt($curl, CURLOPT_NOBODY, true);
        curl_setopt($curl, CURLOPT_HEADER, true);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

        $data = curl_exec($curl);
        curl_close($curl);

        if ($data) {
            $content_length = 'unknown';
            $status = 'unknown';
            if (preg_match("/^HTTP\/1\.[01] (\d\d\d)/", $data, $matches)) {
                $status = (int) $matches[1];
            }

            if (preg_match("/Content-Length: (\d+)/", $data, $matches)) {
                $content_length = (int) $matches[1];
            }

            // http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
            if ($status == 200 || ($status > 300 && $status <= 308)) {
                $result = $content_length;
            }
        }

        return $result;
    }

    /**
     * Check if tg-cli ever contacted contacted username, if not send a /start command.
     *
     * @param $me - The username to check
     *
     * @return true if user is in dialoglist or if it was contacted successfully, false if it couldn't be contacted.
     */
    public function checkbotuser($me)
    {
        // Get all of the peer_id
        $peer_id = [];
        foreach ($GLOBALS['telegram']->getDialogList() as $username) {
            if (isset($username->peer_id)) {
                $peer_id[] = $username->peer_id;
            }
        }
        // If never contacted bot send start command
        if (!in_array($me, $peer_id)) {
            $peer = 'chat#'.$me;
            if (!$GLOBALS['telegram']->msg($peer, '/start')) {
                return false;
            }
        }

        return true;
    }

    /**
     * Check dir existance.
     *
     * @param $dir - The dir to check
     *
     * @return true if dir exists or if it was created successfully, false if it couldn't be created.
     */
    public function checkdir($dir)
    {
        if (!file_exists($dir)) {
            if (!mkdir($dir, 0777, true)) {
                return false;
            }
        }

        return true;
    }

    /**
     * Try to remove file.
     *
     * @param $file - The file to delete
     *
     * @return bool
     */
    public function try_unlink($file)
    {
        if (file_exists($file)) {
            return unlink($file);
        } else {
            return false;
        }
    }

    /**
     * Remove symlink and destination path.
     *
     * @param $symlink - The symlink to delete
     *
     * @return void
     */
    public function unlink_link($symlink)
    {
        $rpath = readlink($symlink);
        $this->try_unlink($symlink);
        $this->try_unlink($rpath);
    }
}
